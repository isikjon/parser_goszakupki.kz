#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–£–†–ë–û –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ü–ê–†–°–ï–† –¥–ª—è www.goszakup.gov.kz
–í–°–ï –±—Ä–∞—É–∑–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û –≤ HEADLESS —Ä–µ–∂–∏–º–µ
"""

import random
import time
from datetime import datetime, timedelta
from typing import List, Dict, Set
import sqlite3
from bs4 import BeautifulSoup
import os
import sys
import threading
import tempfile
import logging
import signal
import atexit
import psutil
from concurrent.futures import ThreadPoolExecutor, as_completed

# Selenium imports
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from webdriver_manager.chrome import ChromeDriverManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
def setup_detailed_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ selenium –∏ urllib3 –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    logging.getLogger('selenium').setLevel(logging.CRITICAL)
    logging.getLogger('urllib3').setLevel(logging.CRITICAL)
    logging.getLogger('webdriver_manager').setLevel(logging.CRITICAL)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
    file_logger = logging.getLogger('turbo_parser')
    file_logger.setLevel(logging.DEBUG)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    file_logger.handlers.clear()
    
    # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    file_handler = logging.FileHandler('turbo_parser_detailed.log', encoding='utf-8', mode='w')
    file_formatter = logging.Formatter(
        '%(asctime)s | %(levelname)-8s | %(funcName)-20s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    file_handler.setFormatter(file_formatter)
    file_logger.addHandler(file_handler)
    
    return file_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
detailed_logger = setup_detailed_logging()

class TurboParallelParser:
    def __init__(self, total_browsers: int = 50, headless: bool = True):
        self.base_url = "https://www.goszakup.gov.kz"
        self.total_browsers = total_browsers
        self.headless = headless
        self.db_file = 'turbo_goszakup.db'
        self.total_pages = 10000
        self.records_per_page = 50
        self.break_time = 5  # –£–º–µ–Ω—å—à–∏–ª –ø–µ—Ä–µ–¥—ã—à–∫—É –¥–ª—è headless
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.start_time = datetime.now()
        self.processed_pages = 0
        self.found_suppliers = 0
        self.detailed_suppliers = 0
        self.stats_lock = threading.Lock()
        
        # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        self.processed_suppliers = set()
        self.duplicates_found = 0
        self.failed_pages: Set[int] = set()
        self.failed_suppliers: Set[str] = set()
        
        # –ü—É–ª –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.browser_pool = []
        self.browser_processes = []
        self.temp_dirs = []
        self.is_shutting_down = False
        
        detailed_logger.info("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–£–†–ë–û –ü–ê–†–°–ï–†–ê ===")
        detailed_logger.info(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤: {total_browsers}")
        detailed_logger.info(f"Headless —Ä–µ–∂–∏–º: {headless}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.setup_cleanup_handlers()
        
        self.init_database()
        self.setup_chrome_driver()
        
    def setup_cleanup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        atexit.register(self.cleanup_all)
        
        detailed_logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        detailed_logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {signum}")
        self.cleanup_all()
        sys.exit(0)
    
    def cleanup_all(self):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.is_shutting_down:
            return
        
        self.is_shutting_down = True
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        detailed_logger.info("–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã
        self.close_all_browsers()
        
        # –£–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è Chrome –ø—Ä–æ—Ü–µ—Å—Å—ã
        self.kill_chrome_processes()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.cleanup_temp_dirs()
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        detailed_logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def close_all_browsers(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤"""
        if not self.browser_pool:
            return
        
        print(f"üîí –ó–∞–∫—Ä—ã—Ç–∏–µ {len(self.browser_pool)} –±—Ä–∞—É–∑–µ—Ä–æ–≤...")
        
        for i, browser in enumerate(self.browser_pool):
            try:
                browser.quit()
                detailed_logger.debug(f"–ë—Ä–∞—É–∑–µ—Ä {i+1} –∑–∞–∫—Ä—ã—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                detailed_logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ {i+1}: {e}")
        
        self.browser_pool.clear()
    
    def kill_chrome_processes(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö Chrome –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        print("üî® –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Chrome –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        killed_count = 0
        
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['name'] and 'chrome' in proc.info['name'].lower():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å (—Å–æ–¥–µ—Ä–∂–∏—Ç user-data-dir)
                        cmdline = proc.info['cmdline'] or []
                        if any('user-data-dir' in str(arg) for arg in cmdline):
                            proc.kill()
                            killed_count += 1
                            detailed_logger.debug(f"–£–±–∏—Ç Chrome –ø—Ä–æ—Ü–µ—Å—Å: PID {proc.info['pid']}")
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        except Exception as e:
            detailed_logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Chrome –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        
        if killed_count > 0:
            print(f"‚ö∞Ô∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–æ {killed_count} Chrome –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
    
    def cleanup_temp_dirs(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        if not self.temp_dirs:
            return
        
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ {len(self.temp_dirs)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        
        for temp_dir in self.temp_dirs:
            try:
                import shutil
                if os.path.exists(temp_dir):
                    shutil.rmtree(temp_dir, ignore_errors=True)
                    detailed_logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
            except Exception as e:
                detailed_logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {temp_dir}: {e}")
        
        self.temp_dirs.clear()

    def setup_chrome_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ª–æ–≥–∏
            os.environ['WDM_LOG_LEVEL'] = '0'
            
            self.chrome_driver_path = ChromeDriverManager().install()
            detailed_logger.info(f"Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.chrome_driver_path}")
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –æ—Ç –º—É—Å–æ—Ä–∞
            self.clear_console()
            print("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            detailed_logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            sys.exit(1)
    
    def clear_console(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS suppliers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                participant_number TEXT UNIQUE,
                name TEXT,
                bin TEXT,
                iin TEXT,
                rnn TEXT,
                supplier_id TEXT UNIQUE,
                detail_url TEXT,
                is_parsed BOOLEAN DEFAULT FALSE,
                is_failed BOOLEAN DEFAULT FALSE,
                retry_count INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS supplier_details (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                supplier_id TEXT,
                section TEXT,
                field_name TEXT,
                field_value TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(supplier_id, section, field_name)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS failed_attempts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                page_number INTEGER,
                supplier_id TEXT,
                error_message TEXT,
                attempt_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                resolved BOOLEAN DEFAULT FALSE
            )
        ''')
        
        conn.commit()
        conn.close()
        
        detailed_logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    def create_stealth_browser(self, browser_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        
        profile_dir = tempfile.mkdtemp(prefix=f"chrome_profile_{browser_id}_")
        self.temp_dirs.append(profile_dir)  # –î–ª—è –æ—á–∏—Å—Ç–∫–∏
        
        options = Options()
        
        # HEADLESS —Ä–µ–∂–∏–º –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        if self.headless:
            options.add_argument("--headless=new")  # –ù–æ–≤—ã–π headless —Ä–µ–∂–∏–º
            options.add_argument("--disable-gpu")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
        
        # –ü–û–õ–ù–û–ï –ü–û–î–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –õ–û–ì–û–í
        options.add_argument("--disable-logging")
        options.add_argument("--disable-gpu-logging")
        options.add_argument("--disable-extensions")
        options.add_argument("--disable-plugins")
        options.add_argument("--disable-images")
        options.add_argument("--silent")
        options.add_argument("--log-level=3")  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
        options.add_argument("--disable-web-security")
        options.add_argument("--disable-features=VizDisplayCompositor")
        options.add_argument("--disable-blink-features=AutomationControlled")
        
        # –£–ë–ò–†–ê–ï–ú DevTools –∏ WARNING —Å–æ–æ–±—â–µ–Ω–∏—è
        options.add_argument("--remote-debugging-port=0")  # –û—Ç–∫–ª—é—á–∞–µ–º remote debugging
        options.add_argument("--disable-dev-tools")
        options.add_argument("--disable-gpu-sandbox")
        options.add_argument("--disable-software-rasterizer")
        options.add_argument("--disable-background-timer-throttling")
        options.add_argument("--disable-backgrounding-occluded-windows")
        options.add_argument("--disable-renderer-backgrounding")
        options.add_argument("--disable-background-networking")
        options.add_argument("--disable-ipc-flooding-protection")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è headless
        if self.headless:
            options.add_argument("--disable-background-timer-throttling")
            options.add_argument("--disable-backgrounding-occluded-windows")
            options.add_argument("--disable-renderer-backgrounding")
            options.add_argument("--disable-background-networking")
            options.add_argument("--disable-ipc-flooding-protection")
        
        # –£–±–∏—Ä–∞–µ–º DevTools —Å–æ–æ–±—â–µ–Ω–∏—è
        options.add_experimental_option("excludeSwitches", ["enable-logging", "enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        prefs = {
            "profile.default_content_setting_values": {
                "notifications": 2,
                "media_stream_mic": 2,
                "media_stream_camera": 2,
                "geolocation": 2
            }
        }
        options.add_experimental_option("prefs", prefs)
        
        options.add_argument(f"--user-data-dir={profile_dir}")
        
        # –†–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω (–¥–ª—è headless –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º)
        window_sizes = ["1920,1080", "1366,768", "1440,900", "1600,900", "1280,720"]
        size = window_sizes[browser_id % len(window_sizes)]
        options.add_argument(f"--window-size={size}")
        
        # User-Agent
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        user_agent = user_agents[browser_id % len(user_agents)]
        options.add_argument(f"--user-agent={user_agent}")
        
        try:
            # –ü–æ–¥–∞–≤–ª—è–µ–º –í–°–ï –õ–û–ì–ò service
            service = Service(self.chrome_driver_path, log_path=os.devnull)
            
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stderr —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å WARNING —Å–æ–æ–±—â–µ–Ω–∏—è
            original_stderr = sys.stderr
            sys.stderr = open(os.devnull, 'w')
            
            driver = webdriver.Chrome(service=service, options=options)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º stderr
            sys.stderr.close()
            sys.stderr = original_stderr
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.browser_processes.append(driver.service.process)
            
            detailed_logger.debug(f"–ë—Ä–∞—É–∑–µ—Ä {browser_id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ ({'headless' if self.headless else '—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º'})")
            return driver
            
        except Exception as e:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º stderr –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
            if 'original_stderr' in locals():
                try:
                    sys.stderr.close()
                except:
                    pass
                sys.stderr = original_stderr
            
            detailed_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ {browser_id}: {e}")
            return None
    
    def init_browser_pool(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û"""
        mode_text = "HEADLESS –±—Ä–∞—É–∑–µ—Ä–æ–≤" if self.headless else "–±—Ä–∞—É–∑–µ—Ä–æ–≤ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"
        print(f"üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ {self.total_browsers} {mode_text}...")
        
        # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã –≥—Ä—É–ø–ø–∞–º–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        batch_size = 50  # –ü–æ 50 –±—Ä–∞—É–∑–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        total_batches = (self.total_browsers + batch_size - 1) // batch_size
        
        for batch_num in range(total_batches):
            if self.is_shutting_down:
                break
            
            start_idx = batch_num * batch_size
            end_idx = min(start_idx + batch_size, self.total_browsers)
            current_batch_size = end_idx - start_idx
            
            print(f"üì¶ –ü–ê–ß–ö–ê {batch_num + 1}/{total_batches}: –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ {start_idx + 1}-{end_idx}...")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏
            with ThreadPoolExecutor(max_workers=current_batch_size) as executor:
                future_to_id = {}
                
                for i in range(start_idx, end_idx):
                    future = executor.submit(self.create_stealth_browser, i)
                    future_to_id[future] = i
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                batch_success = 0
                for future in as_completed(future_to_id):
                    browser_id = future_to_id[future]
                    try:
                        browser = future.result()
                        if browser:
                            self.browser_pool.append(browser)
                            batch_success += 1
                            print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä {browser_id + 1} —Å–æ–∑–¥–∞–Ω")
                        else:
                            print(f"‚ùå –ë—Ä–∞—É–∑–µ—Ä {browser_id + 1} –ù–ï —Å–æ–∑–¥–∞–Ω")
                    except Exception as e:
                        print(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ {browser_id + 1}: {e}")
            
            print(f"üéØ –ü–∞—á–∫–∞ {batch_num + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {batch_success}/{current_batch_size} –±—Ä–∞—É–∑–µ—Ä–æ–≤")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
            if batch_num < total_batches - 1:
                print("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏...")
                time.sleep(2)
        
        print(f"üèÅ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω–æ {len(self.browser_pool)}/{self.total_browsers} –±—Ä–∞—É–∑–µ—Ä–æ–≤")
        detailed_logger.info(f"–°–æ–∑–¥–∞–Ω –ø—É–ª –∏–∑ {len(self.browser_pool)} –±—Ä–∞—É–∑–µ—Ä–æ–≤")
    
    def process_single_page(self, browser, page: int) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–¥–Ω–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º"""
        try:
            url = f"{self.base_url}/ru/registry/supplierreg?count_record={self.records_per_page}&page={page}"
            
            detailed_logger.debug(f"–ë—Ä–∞—É–∑–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
            browser.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            wait = WebDriverWait(browser, 15)
            table = wait.until(EC.presence_of_element_located((By.ID, "search-result")))
            
            # –ü–æ–ª—É—á–∞–µ–º HTML –∏ –ø–∞—Ä—Å–∏–º
            html = browser.page_source
            soup = BeautifulSoup(html, 'lxml')
            
            suppliers = []
            table = soup.find('table', {'id': 'search-result'})
            
            if table:
                tbody = table.find('tbody')
                if tbody:
                    for row in tbody.find_all('tr'):
                        cells = row.find_all('td')
                        if len(cells) >= 5:
                            supplier = {
                                'participant_number': cells[0].get_text(strip=True),
                                'name': cells[1].get_text(strip=True),
                                'bin': cells[2].get_text(strip=True),
                                'iin': cells[3].get_text(strip=True),
                                'rnn': cells[4].get_text(strip=True)
                            }
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Å—Å—ã–ª–∫–∏
                            link = cells[1].find('a')
                            if link and '/show_supplier/' in link.get('href', ''):
                                supplier['supplier_id'] = link.get('href').split('/show_supplier/')[-1]
                                supplier['detail_url'] = link.get('href')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                                if supplier['supplier_id'] not in self.processed_suppliers:
                                    self.processed_suppliers.add(supplier['supplier_id'])
                                    suppliers.append(supplier)
                                    detailed_logger.debug(f"–ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: {supplier['supplier_id']} - {supplier['name']}")
                                else:
                                    with self.stats_lock:
                                        self.duplicates_found += 1
                                    detailed_logger.debug(f"–î—É–±–ª–∏–∫–∞—Ç –ø—Ä–æ–ø—É—â–µ–Ω: {supplier['supplier_id']}")
            
            detailed_logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –Ω–∞–π–¥–µ–Ω–æ {len(suppliers)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            return suppliers
            
        except Exception as e:
            detailed_logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
            with self.stats_lock:
                self.failed_pages.add(page)
            self.log_failed_attempt(page, None, str(e))
            return []
    
    def get_supplier_details(self, browser, supplier_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        try:
            url = f"{self.base_url}/ru/registry/show_supplier/{supplier_id}"
            
            detailed_logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}")
            browser.get(url)
            
            wait = WebDriverWait(browser, 15)
            wait.until(EC.presence_of_element_located((By.CLASS_NAME, "table")))
            
            html = browser.page_source
            soup = BeautifulSoup(html, 'lxml')
            
            details = {}
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
            main_table = soup.find('table', class_='table table-striped')
            if main_table:
                for row in main_table.find_all('tr'):
                    cells = row.find_all(['th', 'td'])
                    if len(cells) == 2:
                        key = cells[0].get_text(strip=True)
                        value = cells[1].get_text(strip=True)
                        details[key] = value
            
            detailed_logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}: {len(details)} –ø–æ–ª–µ–π")
            return details
            
        except Exception as e:
            detailed_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π {supplier_id}: {e}")
            with self.stats_lock:
                self.failed_suppliers.add(supplier_id)
            self.log_failed_attempt(None, supplier_id, str(e))
            return {}
    
    def log_failed_attempt(self, page: int = None, supplier_id: str = None, error: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO failed_attempts (page_number, supplier_id, error_message)
                VALUES (?, ?, ?)
            ''', (page, supplier_id, error))
            conn.commit()
            detailed_logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: page={page}, supplier={supplier_id}")
        except Exception as e:
            detailed_logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {e}")
        finally:
            conn.close()
    
    def save_supplier(self, supplier: dict, details: dict = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –ë–î"""
        conn = sqlite3.connect(self.db_file)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT OR REPLACE INTO suppliers 
                (participant_number, name, bin, iin, rnn, supplier_id, detail_url, is_parsed, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                supplier.get('participant_number', ''),
                supplier.get('name', ''),
                supplier.get('bin', ''),
                supplier.get('iin', ''),
                supplier.get('rnn', ''),
                supplier.get('supplier_id', ''),
                supplier.get('detail_url', ''),
                details is not None,
                datetime.now().isoformat()
            ))
            
            if details and supplier.get('supplier_id'):
                supplier_id = supplier['supplier_id']
                cursor.execute('DELETE FROM supplier_details WHERE supplier_id = ?', (supplier_id,))
                
                for field_name, field_value in details.items():
                    cursor.execute('''
                        INSERT INTO supplier_details (supplier_id, section, field_name, field_value)
                        VALUES (?, ?, ?, ?)
                    ''', (supplier_id, 'basic', field_name, str(field_value)))
                
                detailed_logger.debug(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –¥–µ—Ç–∞–ª—è–º–∏ ({len(details)} –ø–æ–ª–µ–π)")
            else:
                detailed_logger.debug(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier.get('supplier_id')} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π")
            
            conn.commit()
            
        except Exception as e:
            detailed_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
        finally:
            conn.close()
    
    def parallel_round(self, pages: List[int]) -> int:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        round_start = datetime.now()
        all_suppliers = []
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        with ThreadPoolExecutor(max_workers=len(self.browser_pool)) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ - –∫–∞–∂–¥—ã–π –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            future_to_page = {}
            
            for i, page in enumerate(pages[:len(self.browser_pool)]):
                browser = self.browser_pool[i]
                future = executor.submit(self.process_single_page, browser, page)
                future_to_page[future] = page
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in as_completed(future_to_page):
                page = future_to_page[future]
                try:
                    suppliers = future.result()
                    all_suppliers.extend(suppliers)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                    for supplier in suppliers:
                        self.save_supplier(supplier)
                    
                    with self.stats_lock:
                        self.processed_pages += 1
                        self.found_suppliers += len(suppliers)
                    
                    detailed_logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {len(suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
                    
                except Exception as e:
                    detailed_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
        
        round_time = datetime.now() - round_start
        detailed_logger.info(f"–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {round_time.total_seconds():.1f}—Å: {len(all_suppliers)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å {len(pages[:len(self.browser_pool)])} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        return len(all_suppliers)
    
    def print_turbo_stats(self):
        """–í—ã–≤–æ–¥ —Ç—É—Ä–±–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.stats_lock:
            runtime = datetime.now() - self.start_time
            pages_percent = (self.processed_pages / self.total_pages) * 100
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –∏ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.clear_console()
            
            mode_text = "HEADLESS" if self.headless else "–° –ò–ù–¢–ï–†–§–ï–ô–°–û–ú"
            print(f"üöÄ –¢–£–†–ë–û –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ü–ê–†–°–ï–† ({mode_text})")
            print("=" * 70)
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(runtime).split('.')[0]}")
            print(f"üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤: {len(self.browser_pool)} ({mode_text})")
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {self.processed_pages:,}/{self.total_pages:,} ({pages_percent:.1f}%)")
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ: {self.found_suppliers:,} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
            print(f"üîç –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.detailed_suppliers:,}")
            print(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.duplicates_found:,}")
            print(f"‚ùå –ù–µ—É–¥–∞—á —Å—Ç—Ä–∞–Ω–∏—Ü: {len(self.failed_pages)}")
            print(f"‚ùå –ù–µ—É–¥–∞—á –¥–µ—Ç–∞–ª–µ–π: {len(self.failed_suppliers)}")
            
            if runtime.total_seconds() > 0:
                pages_per_min = self.processed_pages / (runtime.total_seconds() / 60)
                suppliers_per_min = self.found_suppliers / (runtime.total_seconds() / 60)
                print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {pages_per_min:.1f} —Å—Ç—Ä/–º–∏–Ω | {suppliers_per_min:.1f} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤/–º–∏–Ω")
            
            print("=" * 70)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            detailed_logger.info(f"–¢–£–†–ë–û –°–¢–ê–¢–ò–°–¢–ò–ö–ê: browsers={len(self.browser_pool)}, pages={self.processed_pages}, found={self.found_suppliers}, detailed={self.detailed_suppliers}")
    
    def run_turbo_parsing(self, start_page: int = 1, end_page: int = 10000):
        """–ó–∞–ø—É—Å–∫ —Ç—É—Ä–±–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        
        self.clear_console()
        mode_text = "HEADLESS" if self.headless else "–° –ò–ù–¢–ï–†–§–ï–ô–°–û–ú"
        print(f"üöÄ –¢–£–†–ë–û –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ü–ê–†–°–ï–† ({mode_text})")
        print("=" * 70)
        print(f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   ‚Ä¢ –†–µ–∂–∏–º: {mode_text}")
        print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤: {self.total_browsers}")
        print(f"   ‚Ä¢ –ü–µ—Ä–µ–¥—ã—à–∫–∞ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏: {self.break_time} —Å–µ–∫—É–Ω–¥")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {self.records_per_page}")
        print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü: {start_page}-{end_page}")
        print("=" * 70)
        
        detailed_logger.info("=== –ù–ê–ß–ê–õ–û –¢–£–†–ë–û –ü–ê–†–°–ò–ù–ì–ê ===")
        detailed_logger.info(f"–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü: {start_page}-{end_page}")
        detailed_logger.info(f"Headless —Ä–µ–∂–∏–º: {self.headless}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª –±—Ä–∞—É–∑–µ—Ä–æ–≤
            self.init_browser_pool()
            
            if not self.browser_pool:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä—ã!")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            all_pages = list(range(start_page, end_page + 1))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            stats_thread = threading.Thread(target=self.stats_monitor, daemon=True)
            stats_thread.start()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—É–Ω–¥–∞–º–∏
            current_page_index = 0
            round_number = 1
            
            while current_page_index < len(all_pages) and not self.is_shutting_down:
                round_start = datetime.now()
                
                # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ N —Å—Ç—Ä–∞–Ω–∏—Ü (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±—Ä–∞—É–∑–µ—Ä–æ–≤)
                pages_for_round = all_pages[current_page_index:current_page_index + len(self.browser_pool)]
                current_page_index += len(pages_for_round)
                
                print(f"\nüî• –†–ê–£–ù–î {round_number}: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü {pages_for_round[0]}-{pages_for_round[-1]} ({len(pages_for_round)} –±—Ä–∞—É–∑–µ—Ä–æ–≤)")
                
                # –í–°–ï –ë–†–ê–£–ó–ï–†–´ –†–ê–ë–û–¢–ê–Æ–¢ –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û!
                suppliers_count = self.parallel_round(pages_for_round)
                
                round_time = datetime.now() - round_start
                print(f"‚úÖ –†–∞—É–Ω–¥ {round_number} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {round_time.total_seconds():.1f}—Å: {suppliers_count} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
                
                # –ü–ï–†–ï–î–´–®–ö–ê –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏
                if current_page_index < len(all_pages) and not self.is_shutting_down:
                    print(f"üò¥ –ü–µ—Ä–µ–¥—ã—à–∫–∞ {self.break_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(self.break_time)
                
                round_number += 1
        
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            detailed_logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        except Exception as e:
            print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
            detailed_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        finally:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            self.cleanup_all()
        
        self.print_turbo_stats()
        print(f"\nüéâ –¢–£–†–ë–û –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù! ({'Headless' if self.headless else '–° –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º'})")
        detailed_logger.info("=== –¢–£–†–ë–û –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù ===")
    
    def stats_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥"""
        while True:
            time.sleep(5)  # –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–ñ–î–´–ï 5 –°–ï–ö–£–ù–î
            self.print_turbo_stats()

def main():
    # –£–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    import warnings
    warnings.filterwarnings("ignore")
    
    print("üöÄ –¢–£–†–ë–û –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ü–ê–†–°–ï–†")
    print("1. –î–µ–º–æ HEADLESS (20 –±—Ä–∞—É–∑–µ—Ä–æ–≤, –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–∞–Ω–∏—Ü)")
    print("2. –ë—ã—Å—Ç—Ä—ã–π HEADLESS (50 –±—Ä–∞—É–∑–µ—Ä–æ–≤, 1000 —Å—Ç—Ä–∞–Ω–∏—Ü)")
    print("3. –ü–æ–ª–Ω—ã–π HEADLESS (100 –±—Ä–∞—É–∑–µ—Ä–æ–≤, 10,000 —Å—Ç—Ä–∞–Ω–∏—Ü)")
    print("4. –≠–∫—Å—Ç—Ä–∏–º HEADLESS (200 –±—Ä–∞—É–∑–µ—Ä–æ–≤, 10,000 —Å—Ç—Ä–∞–Ω–∏—Ü)")
    print("5. –° –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (10 –±—Ä–∞—É–∑–µ—Ä–æ–≤, –¥–µ–º–æ)")
    print("6. üîß –ö–ê–°–¢–û–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò (–≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–∞–º–∏)")
    
    choice = input("–í—ã–±–æ—Ä (1-6): ").strip()
    
    if choice == "1":
        parser = TurboParallelParser(total_browsers=20, headless=True)
        parser.run_turbo_parsing(1, 100)
    elif choice == "2":
        parser = TurboParallelParser(total_browsers=50, headless=True)
        parser.run_turbo_parsing(1, 1000)
    elif choice == "3":
        confirm = input("‚ö†Ô∏è  100 HEADLESS –±—Ä–∞—É–∑–µ—Ä–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if confirm.lower() == 'y':
            parser = TurboParallelParser(total_browsers=100, headless=True)
            parser.run_turbo_parsing(1, 10000)
        else:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    elif choice == "4":
        confirm = input("‚ö†Ô∏è  200 HEADLESS –±—Ä–∞—É–∑–µ—Ä–æ–≤! –≠–ö–°–¢–†–ò–ú! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if confirm.lower() == 'y':
            parser = TurboParallelParser(total_browsers=200, headless=True)
            parser.run_turbo_parsing(1, 10000)
        else:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    elif choice == "5":
        parser = TurboParallelParser(total_browsers=10, headless=False)
        parser.run_turbo_parsing(1, 50)
    elif choice == "6":
        print("\nüîß –ö–ê–°–¢–û–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò")
        print("=" * 50)
        
        # –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞
        print("–†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞:")
        print("1. HEADLESS (–±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –±—ã—Å—Ç—Ä–µ–µ)")
        print("2. –° –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (–≤–∏–¥–∏–º—ã–µ –æ–∫–Ω–∞)")
        
        mode_choice = input("–†–µ–∂–∏–º (1-2): ").strip()
        headless = True if mode_choice == "1" else False
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤
        while True:
            try:
                browsers_count = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (1-500): "))
                if 1 <= browsers_count <= 500:
                    break
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 500")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        
        # –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü
        print("\n–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print("üí° –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ —Å–∞–π—Ç–µ: ~10,000")
        print("üí° –ù–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ~50 –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
        
        while True:
            try:
                start_page = int(input("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (1-10000): "))
                if 1 <= start_page <= 10000:
                    break
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        
        while True:
            try:
                end_page = int(input(f"–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ({start_page}-10000): "))
                if start_page <= end_page <= 10000:
                    break
                else:
                    print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {start_page} –¥–æ 10000")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        total_pages = end_page - start_page + 1
        estimated_suppliers = total_pages * 50
        mode_text = "HEADLESS" if headless else "–° –ò–ù–¢–ï–†–§–ï–ô–°–û–ú"
        
        print("\nüìã –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"   ‚Ä¢ –†–µ–∂–∏–º: {mode_text}")
        print(f"   ‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä–æ–≤: {browsers_count}")
        print(f"   ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü—ã: {start_page}-{end_page} ({total_pages:,} —Å—Ç—Ä–∞–Ω–∏—Ü)")
        print(f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ~{estimated_suppliers:,}")
        
        if browsers_count > 100:
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: {browsers_count} –±—Ä–∞—É–∑–µ—Ä–æ–≤ - —ç—Ç–æ –±–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞!")
        
        confirm = input("\nüöÄ –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥? (y/N): ")
        
        if confirm.lower() == 'y':
            parser = TurboParallelParser(total_browsers=browsers_count, headless=headless)
            parser.run_turbo_parsing(start_page, end_page)
        else:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        detailed_logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        detailed_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 